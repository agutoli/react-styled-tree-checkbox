{"version":3,"sources":["../../src/TreeCheckbox/TreeCheckbox.js"],"names":["TreeCheckbox","props","state","currentSelected","onToggleSelectAll","_onToggleSelectAll","bind","event","setState","target","value","nodes","showToggleText","showToggleArrow","showChildrenLength","map","node","React","PureComponent","propTypes","PropTypes","array","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMMA,Y;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAGjB,YAAKC,KAAL,GAAa;AACXC,yBAAiB;AADN,OAAb;;AAIA,YAAKC,iBAAL,GAAyB,MAAKC,kBAAL,CAAwBC,IAAxB,OAAzB;AAPiB;AAQlB;;;;yCAEkBC,K,EAAO;AACxB,aAAKC,QAAL,CAAc;AACZL,2BAAiBI,MAAME,MAAN,CAAaC;AADlB,SAAd;AAGD;;;+BAEQ;AAAA;;AAAA,qBAMH,KAAKT,KANF;AAAA,YAELU,KAFK,UAELA,KAFK;AAAA,YAGLC,cAHK,UAGLA,cAHK;AAAA,YAILC,eAJK,UAILA,eAJK;AAAA,YAKLC,kBALK,UAKLA,kBALK;AAAA,YAQCX,eARD,GAQqB,KAAKD,KAR1B,CAQCC,eARD;;;AAUP,eACE;AAAC,uCAAD;AAAA;AACGQ,gBAAMI,GAAN,CAAU,UAACC,IAAD;AAAA,mBACT,8BAAC,0BAAD;AACE,uCAAuBA,KAAKN,KAD9B;AAEE,oBAAMM,IAFR;AAGE,8BAAgBJ,cAHlB;AAIE,+BAAiBC,eAJnB;AAKE,kCAAoBC,kBALtB;AAME,yBAAWX,mBAAmBa,KAAKN,KANrC;AAOE,iCAAmB,OAAKN,iBAP1B,GADS;AAAA,WAAV;AADH,SADF;AAcD;;;;IAzCwBa,gBAAMC,a;;AA4CjClB,eAAamB,SAAb,GAAyB;AACvBR,WAAOS,oBAAUC,KADM;AAEvBP,wBAAoBM,oBAAUE,IAFP;AAGvBV,oBAAgBQ,oBAAUE,IAHH;AAIvBT,qBAAiBO,oBAAUE;AAJJ,GAAzB;;AAOAtB,eAAauB,YAAb,GAA4B;AAC1BZ,WAAO,EADmB;AAE1BG,wBAAoB;AAFM,GAA5B;;oBAKed,Y","file":"TreeCheckbox.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport TreeCheckboxItem from './TreeCheckboxItem'\nimport TreeCheckboxWrapper from './partials/TreeCheckboxWrapper'\n\nclass TreeCheckbox extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currentSelected: null\n    }\n\n    this.onToggleSelectAll = this._onToggleSelectAll.bind(this)\n  }\n\n  _onToggleSelectAll(event) {\n    this.setState({\n      currentSelected: event.target.value\n    })\n  }\n\n  render() {\n    const {\n      nodes,\n      showToggleText,\n      showToggleArrow,\n      showChildrenLength\n    } = this.props\n\n    const { currentSelected } = this.state\n\n    return (\n      <TreeCheckboxWrapper>\n        {nodes.map((node) => (\n          <TreeCheckboxItem\n            key={`root-node-item-${node.value}`}\n            node={node}\n            showToggleText={showToggleText}\n            showToggleArrow={showToggleArrow}\n            showChildrenLength={showChildrenLength}\n            collapsed={currentSelected != node.value}\n            onToggleSelectAll={this.onToggleSelectAll} />\n        ))}\n      </TreeCheckboxWrapper>\n    )\n  }\n}\n\nTreeCheckbox.propTypes = {\n  nodes: PropTypes.array,\n  showChildrenLength: PropTypes.bool,\n  showToggleText: PropTypes.bool,\n  showToggleArrow: PropTypes.bool\n}\n\nTreeCheckbox.defaultProps = {\n  nodes: [],\n  showChildrenLength: false\n}\n\nexport default TreeCheckbox\n"]}