{"version":3,"sources":["../../src/TreeCheckbox/TreeCheckbox.js"],"names":["TreeCheckbox","props","state","checkedItems","getInitialCheckedItems","currentSelected","onToggleSelectAll","_onToggleSelectAll","bind","onChangeItems","_onChangeItems","nodes","reduce","s","c","value","children","filter","x","checked","map","event","setState","target","rootId","items","onChange","className","showToggleText","showToggleArrow","showNativeStyle","showChildrenLength","node","React","PureComponent","propTypes","PropTypes","array","func","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMMA,Y;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAGjB,YAAKC,KAAL,GAAa;AACXC,sBAAc,MAAKC,sBAAL,CAA4BH,KAA5B,CADH;AAEXI,yBAAiB;AAFN,OAAb;;AAKA,YAAKC,iBAAL,GAAyB,MAAKC,kBAAL,CAAwBC,IAAxB,OAAzB;AACA,YAAKC,aAAL,GAAqB,MAAKC,cAAL,CAAoBF,IAApB,OAArB;AATiB;AAUlB;;;;6CAEsBP,K,EAAO;AAC5B,eAAOA,MAAMU,KAAN,CAAYC,MAAZ,CAAmB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAClCD,YAAEC,EAAEC,KAAJ,IAAaD,EAAEE,QAAF,CAAWC,MAAX,CAAkB;AAAA,mBAAKC,EAAEC,OAAP;AAAA,WAAlB,EAAkCC,GAAlC,CAAsC;AAAA,mBAAKF,EAAEH,KAAP;AAAA,WAAtC,CAAb;AACA,iBAAOF,CAAP;AACD,SAHM,EAGJ,EAHI,CAAP;AAID;;;yCAEkBQ,K,EAAO;AACxB,aAAKC,QAAL,CAAc;AACZjB,2BAAiBgB,MAAME,MAAN,CAAaR;AADlB,SAAd;AAGD;;;qCAEcS,M,EAAQC,K,EAAO;AAAA;;AAC5B,aAAKvB,KAAL,CAAWC,YAAX,CAAwBqB,MAAxB,IAAkCC,KAAlC;AACA,aAAKH,QAAL,CAAc;AACZnB,wBAAc,KAAKD,KAAL,CAAWC;AADb,SAAd,EAEG,YAAM;AACP,iBAAKF,KAAL,CAAWyB,QAAX,CAAoB,OAAKxB,KAAL,CAAWC,YAA/B;AACD,SAJD;AAKD;;;+BAEQ;AAAA;;AAAA,qBAQH,KAAKF,KARF;AAAA,YAELU,KAFK,UAELA,KAFK;AAAA,YAGLgB,SAHK,UAGLA,SAHK;AAAA,YAILC,cAJK,UAILA,cAJK;AAAA,YAKLC,eALK,UAKLA,eALK;AAAA,YAMLC,eANK,UAMLA,eANK;AAAA,YAOLC,kBAPK,UAOLA,kBAPK;AAAA,qBAUmC,KAAK7B,KAVxC;AAAA,YAUCG,eAVD,UAUCA,eAVD;AAAA,YAUkBF,YAVlB,UAUkBA,YAVlB;;;AAYP,eACE;AAAC,uCAAD;AAAA,YAAqB,WAAWwB,SAAhC;AACGhB,gBAAMS,GAAN,CAAU,UAACY,IAAD;AAAA,mBACT,8BAAC,0BAAD;AACE,uCAAuBA,KAAKjB,KAD9B;AAEE,oBAAMiB,IAFR;AAGE,wBAAU,OAAKvB,aAHjB;AAIE,+BAAiBqB,eAJnB;AAKE,8BAAgBF,cALlB;AAME,+BAAiBC,eANnB;AAOE,kCAAoBE,kBAPtB;AAQE,yBAAW1B,mBAAmB2B,KAAKjB,KARrC;AASE,iCAAmB,OAAKT,iBAT1B,GADS;AAAA,WAAV;AADH,SADF;AAgBD;;;;IA/DwB2B,gBAAMC,a;;AAkEjClC,eAAamC,SAAb,GAAyB;AACvBxB,WAAOyB,oBAAUC,KADM;AAEvBX,cAAUU,oBAAUE,IAFG;AAGvBP,wBAAoBK,oBAAUG,IAHP;AAIvBX,oBAAgBQ,oBAAUG,IAJH;AAKvBV,qBAAiBO,oBAAUG;AALJ,GAAzB;;AAQAvC,eAAawC,YAAb,GAA4B;AAC1B7B,WAAO,EADmB;AAE1Be,cAAU,oBAAM,CAAE,CAFQ;AAG1BK,wBAAoB;AAHM,GAA5B;;oBAMe/B,Y","file":"TreeCheckbox.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport TreeCheckboxItem from './TreeCheckboxItem'\nimport TreeCheckboxWrapper from './partials/TreeCheckboxWrapper'\n\nclass TreeCheckbox extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      checkedItems: this.getInitialCheckedItems(props),\n      currentSelected: null\n    }\n\n    this.onToggleSelectAll = this._onToggleSelectAll.bind(this)\n    this.onChangeItems = this._onChangeItems.bind(this)\n  }\n\n  getInitialCheckedItems(props) {\n    return props.nodes.reduce((s, c) => {\n      s[c.value] = c.children.filter(x => x.checked).map(x => x.value)\n      return s\n    }, {})\n  }\n\n  _onToggleSelectAll(event) {\n    this.setState({\n      currentSelected: event.target.value\n    })\n  }\n\n  _onChangeItems(rootId, items) {\n    this.state.checkedItems[rootId] = items\n    this.setState({\n      checkedItems: this.state.checkedItems\n    }, () => {\n      this.props.onChange(this.state.checkedItems)\n    })\n  }\n\n  render() {\n    const {\n      nodes,\n      className,\n      showToggleText,\n      showToggleArrow,\n      showNativeStyle,\n      showChildrenLength\n    } = this.props\n\n    const { currentSelected, checkedItems } = this.state\n\n    return (\n      <TreeCheckboxWrapper className={className}>\n        {nodes.map((node) => (\n          <TreeCheckboxItem\n            key={`root-node-item-${node.value}`}\n            node={node}\n            onChange={this.onChangeItems}\n            showNativeStyle={showNativeStyle}\n            showToggleText={showToggleText}\n            showToggleArrow={showToggleArrow}\n            showChildrenLength={showChildrenLength}\n            collapsed={currentSelected != node.value}\n            onToggleSelectAll={this.onToggleSelectAll} />\n        ))}\n      </TreeCheckboxWrapper>\n    )\n  }\n}\n\nTreeCheckbox.propTypes = {\n  nodes: PropTypes.array,\n  onChange: PropTypes.func,\n  showChildrenLength: PropTypes.bool,\n  showToggleText: PropTypes.bool,\n  showToggleArrow: PropTypes.bool\n}\n\nTreeCheckbox.defaultProps = {\n  nodes: [],\n  onChange: () => {},\n  showChildrenLength: false\n}\n\nexport default TreeCheckbox\n"]}