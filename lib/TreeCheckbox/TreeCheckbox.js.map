{"version":3,"sources":["../../src/TreeCheckbox/TreeCheckbox.js"],"names":["TreeCheckbox","props","state","currentSelected","onToggleSelectAll","_onToggleSelectAll","bind","event","setState","target","value","nodes","className","showToggleText","showToggleArrow","showNativeStyle","showChildrenLength","map","node","React","PureComponent","propTypes","PropTypes","array","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMMA,Y;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAGjB,YAAKC,KAAL,GAAa;AACXC,yBAAiB;AADN,OAAb;;AAIA,YAAKC,iBAAL,GAAyB,MAAKC,kBAAL,CAAwBC,IAAxB,OAAzB;AAPiB;AAQlB;;;;yCAEkBC,K,EAAO;AACxB,aAAKC,QAAL,CAAc;AACZL,2BAAiBI,MAAME,MAAN,CAAaC;AADlB,SAAd;AAGD;;;+BAEQ;AAAA;;AAAA,qBAQH,KAAKT,KARF;AAAA,YAELU,KAFK,UAELA,KAFK;AAAA,YAGLC,SAHK,UAGLA,SAHK;AAAA,YAILC,cAJK,UAILA,cAJK;AAAA,YAKLC,eALK,UAKLA,eALK;AAAA,YAMLC,eANK,UAMLA,eANK;AAAA,YAOLC,kBAPK,UAOLA,kBAPK;AAAA,YAUCb,eAVD,GAUqB,KAAKD,KAV1B,CAUCC,eAVD;;;AAYP,eACE;AAAC,uCAAD;AAAA,YAAqB,WAAWS,SAAhC;AACGD,gBAAMM,GAAN,CAAU,UAACC,IAAD;AAAA,mBACT,8BAAC,0BAAD;AACE,uCAAuBA,KAAKR,KAD9B;AAEE,oBAAMQ,IAFR;AAGE,+BAAiBH,eAHnB;AAIE,8BAAgBF,cAJlB;AAKE,+BAAiBC,eALnB;AAME,kCAAoBE,kBANtB;AAOE,yBAAWb,mBAAmBe,KAAKR,KAPrC;AAQE,iCAAmB,OAAKN,iBAR1B,GADS;AAAA,WAAV;AADH,SADF;AAeD;;;;IA5CwBe,gBAAMC,a;;AA+CjCpB,eAAaqB,SAAb,GAAyB;AACvBV,WAAOW,oBAAUC,KADM;AAEvBP,wBAAoBM,oBAAUE,IAFP;AAGvBX,oBAAgBS,oBAAUE,IAHH;AAIvBV,qBAAiBQ,oBAAUE;AAJJ,GAAzB;;AAOAxB,eAAayB,YAAb,GAA4B;AAC1Bd,WAAO,EADmB;AAE1BK,wBAAoB;AAFM,GAA5B;;oBAKehB,Y","file":"TreeCheckbox.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport TreeCheckboxItem from './TreeCheckboxItem'\nimport TreeCheckboxWrapper from './partials/TreeCheckboxWrapper'\n\nclass TreeCheckbox extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currentSelected: null\n    }\n\n    this.onToggleSelectAll = this._onToggleSelectAll.bind(this)\n  }\n\n  _onToggleSelectAll(event) {\n    this.setState({\n      currentSelected: event.target.value\n    })\n  }\n\n  render() {\n    const {\n      nodes,\n      className,\n      showToggleText,\n      showToggleArrow,\n      showNativeStyle,\n      showChildrenLength\n    } = this.props\n\n    const { currentSelected } = this.state\n\n    return (\n      <TreeCheckboxWrapper className={className}>\n        {nodes.map((node) => (\n          <TreeCheckboxItem\n            key={`root-node-item-${node.value}`}\n            node={node}\n            showNativeStyle={showNativeStyle}\n            showToggleText={showToggleText}\n            showToggleArrow={showToggleArrow}\n            showChildrenLength={showChildrenLength}\n            collapsed={currentSelected != node.value}\n            onToggleSelectAll={this.onToggleSelectAll} />\n        ))}\n      </TreeCheckboxWrapper>\n    )\n  }\n}\n\nTreeCheckbox.propTypes = {\n  nodes: PropTypes.array,\n  showChildrenLength: PropTypes.bool,\n  showToggleText: PropTypes.bool,\n  showToggleArrow: PropTypes.bool\n}\n\nTreeCheckbox.defaultProps = {\n  nodes: [],\n  showChildrenLength: false\n}\n\nexport default TreeCheckbox\n"]}