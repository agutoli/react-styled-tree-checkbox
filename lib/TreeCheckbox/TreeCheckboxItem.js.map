{"version":3,"sources":["../../src/TreeCheckbox/TreeCheckboxItem.js"],"names":["TreeCheckboxItem","props","state","selectedValues","Set","collapsed","onToggleCollape","_onToggleCollape","bind","onChangeChildField","_onChangeChildField","onToggleSelectAll","_onToggleSelectAll","setState","target","checked","parseInt","value","event","node","clear","children","map","child","add","console","log","has","childLabelRender","showToggleArrow","showToggleText","isAllSelected","size","length","icon","label","renderChildren","React","PureComponent","propTypes","PropTypes","bool","showChanges","func","defaultProps"],"mappings":"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","file":"TreeCheckboxItem.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ItemWrapper from './partials/ItemWrapper'\nimport CollapseText from './partials/CollapseText'\nimport ArrowCollapse from './partials/ArrowCollapse'\nimport RootNodeLabel from './partials/RootNodeLabel'\nimport InputCheckbox from './partials/InputCheckbox'\nimport RootNodeWrapper from './partials/RootNodeWrapper'\nimport ChildNodeWrapper from './partials/ChildNodeWrapper'\nimport ChildrenNodeWrapper from './partials/ChildrenNodeWrapper'\n\nimport childLabelRender from './renders/childLabelRender'\n\nclass TreeCheckboxItem extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedValues: new Set([]),\n      collapsed: props.collapsed\n    }\n\n    this.onToggleCollape = this._onToggleCollape.bind(this)\n    this.onChangeChildField = this._onChangeChildField.bind(this)\n    this.onToggleSelectAll = this._onToggleSelectAll.bind(this)\n  }\n\n  _onToggleCollape() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    })\n  }\n\n  _onChangeChildField({ target }) {\n    const { selectedValues } = this.state\n    selectedValues[target.checked ? 'add': 'delete'](parseInt(target.value))\n    this.setState({ selectedValues: new Set(selectedValues) })\n  }\n\n  _onToggleSelectAll(event) {\n    const { node } = this.props\n    const { selectedValues } = this.state\n\n    if (!event.target.checked) {\n      selectedValues.clear()\n    }\n\n    if (event.target.checked) {\n      node.children.map((child) => selectedValues.add(parseInt(child.value)))\n    }\n\n    this.setState({ selectedValues: new Set(selectedValues) })\n    this.props.onToggleSelectAll(event)\n  }\n\n  renderChildren(children) {\n    const { collapsed, selectedValues } = this.state\n    return (\n      <ChildrenNodeWrapper data-children-node-wrapper key=\"children-node-wrapper\">\n        {children.map((node) => (\n          <ChildNodeWrapper key={node.value} data-child-node-wrapper>\n            { console.log(selectedValues, node) }\n            <InputCheckbox\n              value={node.value}\n              checked={selectedValues.has(node.value)}\n              id={`root-node-${node.value}`}\n              onChange={this.onChangeChildField} />\n            {this.props.childLabelRender(node)}\n          </ChildNodeWrapper>\n        ))}\n      </ChildrenNodeWrapper>\n    )\n  }\n\n  componentWillReceiveProps({ collapsed }) {\n    this.setState({ collapsed })\n  }\n\n  render() {\n    const { collapsed, selectedValues } = this.state\n    const {\n      node,\n      showToggleArrow,\n      showToggleText\n    } = this.props\n\n    const isAllSelected = selectedValues.size === node.children.length\n\n    return (\n      <ItemWrapper collapsed={collapsed}>\n        <RootNodeWrapper key={node.value} data-root-node-wrapper>\n          {showToggleArrow ? <ArrowCollapse collapsed={collapsed} onClick={this.onToggleCollape} /> : null}\n          <InputCheckbox\n            value={node.value}\n            checked={isAllSelected}\n            onChange={this.onToggleSelectAll} />\n          {node.icon}\n          <RootNodeLabel onClick={this.onToggleCollape} data-root-node-label>\n            {node.label}{' '}<span className=\"children-length\">({node.children.length})</span>\n          </RootNodeLabel>\n          <CollapseText\n            className=\"collapse-expand-menu\"\n            onClick={this.onToggleCollape}>\n            {showToggleText ? collapsed ? 'expand' : 'collapse': null}\n          </CollapseText>\n        </RootNodeWrapper>\n        {this.renderChildren(node.children)}\n      </ItemWrapper>\n    )\n  }\n}\n\nTreeCheckboxItem.propTypes = {\n  collapsed: PropTypes.bool,\n  showChanges: PropTypes.bool,\n  showToggleArrow: PropTypes.bool,\n  showToggleText: PropTypes.bool,\n  childLabelRender: PropTypes.func,\n  onToggleSelectAll: PropTypes.func,\n}\n\nTreeCheckboxItem.defaultProps = {\n  childLabelRender,\n  collapsed: false,\n  showChanges: true,\n  showToggleArrow: false,\n  showToggleText: false,\n  onToggleSelectAll: () => {}\n}\n\nexport default TreeCheckboxItem\n"]}