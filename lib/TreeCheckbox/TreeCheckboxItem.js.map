{"version":3,"sources":["../../src/TreeCheckbox/TreeCheckboxItem.js"],"names":["TreeCheckboxItem","props","checkedNodes","node","children","filter","x","checked","map","value","state","selectedValues","Set","collapsed","onToggleCollape","_onToggleCollape","bind","onChangeChildField","_onChangeChildField","onToggleSelectAll","_onToggleSelectAll","setState","target","parseInt","child","add","clear","event","unselectAllItems","selectAllItems","has","childLabelRenderer","showToggleArrow","showToggleText","isAllSelected","size","length","icon","rootLabelRenderer","renderChildren","setTimeout","React","PureComponent","propTypes","PropTypes","bool","showChanges","func","defaultProps"],"mappings":"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","file":"TreeCheckboxItem.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ItemWrapper from './partials/ItemWrapper'\nimport CollapseText from './partials/CollapseText'\nimport ArrowCollapse from './partials/ArrowCollapse'\n\nimport InputCheckbox from './partials/InputCheckbox'\nimport RootNodeWrapper from './partials/RootNodeWrapper'\nimport ChildNodeWrapper from './partials/ChildNodeWrapper'\nimport ChildrenNodeWrapper from './partials/ChildrenNodeWrapper'\n\nimport rootLabelRenderer from './renderers/rootLabelRenderer'\nimport childLabelRenderer from './renderers/childLabelRenderer'\n\nclass TreeCheckboxItem extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    const checkedNodes = props.node.children.filter(x => x.checked).map(x => x.value)\n\n    this.state = {\n      selectedValues: new Set(checkedNodes),\n      collapsed: props.collapsed\n    }\n\n    this.onToggleCollape = this._onToggleCollape.bind(this)\n    this.onChangeChildField = this._onChangeChildField.bind(this)\n    this.onToggleSelectAll = this._onToggleSelectAll.bind(this)\n\n  }\n\n  _onToggleCollape() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    })\n  }\n\n  _onChangeChildField({ target }) {\n    const { selectedValues } = this.state\n    selectedValues[target.checked ? 'add': 'delete'](parseInt(target.value))\n    this.setState({ selectedValues: new Set(selectedValues) })\n  }\n\n  selectAllItems(node) {\n    const { selectedValues } = this.state\n    node.children.map((child) => selectedValues.add(parseInt(child.value)))\n    this.setState({ selectedValues: new Set(selectedValues) })\n  }\n\n  unselectAllItems(node) {\n    const { selectedValues } = this.state\n    selectedValues.clear()\n    this.setState({ selectedValues: new Set(selectedValues) })\n  }\n\n  _onToggleSelectAll(event) {\n    const { node } = this.props\n    const { selectedValues } = this.state\n\n    if (!event.target.checked) {\n      this.unselectAllItems(node)\n    }\n\n    if (event.target.checked) {\n      this.selectAllItems(node)\n    }\n\n    this.props.onToggleSelectAll(event)\n  }\n\n  renderChildren(children) {\n    const { collapsed, selectedValues } = this.state\n    return (\n      <ChildrenNodeWrapper data-children-node-wrapper key=\"children-node-wrapper\">\n        {children.map((node) => (\n          <ChildNodeWrapper key={node.value} data-child-node-wrapper>\n            <InputCheckbox\n              value={node.value}\n              checked={selectedValues.has(node.value)}\n              id={`root-node-${node.value}`}\n              onChange={this.onChangeChildField} />\n            {this.props.childLabelRenderer(node)}\n          </ChildNodeWrapper>\n        ))}\n      </ChildrenNodeWrapper>\n    )\n  }\n\n  componentWillReceiveProps({ collapsed }) {\n    this.setState({ collapsed })\n  }\n\n  render() {\n    const { collapsed, selectedValues } = this.state\n\n    const {\n      node,\n      showToggleArrow,\n      showToggleText\n    } = this.props\n\n    const isAllSelected = selectedValues.size === node.children.length\n\n    return (\n      <ItemWrapper collapsed={collapsed}>\n        <RootNodeWrapper key={node.value} data-root-node-wrapper>\n          {showToggleArrow ? <ArrowCollapse collapsed={collapsed} onClick={this.onToggleCollape} /> : null}\n          <InputCheckbox\n            value={node.value}\n            checked={isAllSelected}\n            onChange={this.onToggleSelectAll} />\n          {node.icon ? <i className=\"tree-checkbox__icon\">{node.icon}</i> : null}\n          {this.props.rootLabelRenderer(node, this.props, {\n            onToggleCollape: this.onToggleCollape,\n            onToggleSelectAll: this.onToggleSelectAll\n          })}\n          <CollapseText\n            className=\"collapse-expand-menu\"\n            onClick={this.onToggleCollape}>\n            {showToggleText ? collapsed ? 'expand' : 'collapse': null}\n          </CollapseText>\n        </RootNodeWrapper>\n        {this.renderChildren(node.children)}\n      </ItemWrapper>\n    )\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      if (this.props.node.checked) {\n        this.selectAllItems(this.props.node)\n      }\n    }, 1)\n  }\n}\n\nTreeCheckboxItem.propTypes = {\n  collapsed: PropTypes.bool,\n  showChanges: PropTypes.bool,\n  showToggleArrow: PropTypes.bool,\n  showToggleText: PropTypes.bool,\n  rootLabelRenderer: PropTypes.func,\n  childLabelRenderer: PropTypes.func,\n  onToggleSelectAll: PropTypes.func,\n}\n\nTreeCheckboxItem.defaultProps = {\n  rootLabelRenderer,\n  childLabelRenderer,\n  collapsed: false,\n  showChanges: true,\n  showToggleArrow: false,\n  showToggleText: false,\n  onToggleSelectAll: () => {}\n}\n\nexport default TreeCheckboxItem\n"]}